<?php

namespace itzen\comments\widgets;

use yii\base\Widget;

/**
 * Comment widget
 * @author PaweÅ‚ Kania
 */
class CommentsWidget extends Widget
{
    public $model;
    public $printOptions = [];

    public $view;

    public function getCommentsAsTree()
    {
        $modelParams = [];
        $modelParams['object_id'] = $this->model->object_id;
        $modelParams['object_key'] = $this->model->object_key;

        $dependencyParams = [];
        $dependencyParams[':object_id'] = $this->model->object_id;
        $dependencyParams[':object_key'] = $this->model->object_key;


        $db = Yii::$app->db;
        $data = $db->cache(function ($db) use ($modelParams) {
            return Comment::find()->where($modelParams)->with('user.profile')->all();
        }, 3600, new \yii\caching\DbDependency(['sql' => 'SELECT MAX(id) FROM {{%core_comment}} WHERE object_id=:object_id AND object_key=:object_key', 'params' => $dependencyParams, 'reusable' => true])
        );
        // $data = Comment::find()->where($modelParams)->with('user.profile')->all();

        $tree = $this->parseCommentTree($data);
        return $tree;
    }

    function parseCommentTree($tree, $root = null)
    {
        $return = array();
        # Traverse the tree and search for direct children of the root
        foreach ($tree as $key => $element) {
            # A direct child is found
            if ($element->parent_id == $root) {
                # Remove item from tree (we don't need to traverse this again)
                unset($tree[$key]);
                # Append the child into result array and parse its children
                $return[] = array(
                    'model' => $element,
                    'children' => $this->parseCommentTree($tree, $element->id)
                );
            }
        }
        return empty($return) ? null : $return;
    }

    public function htmlCommentTree($tree)
    {
        if (!is_null($tree) && count($tree) > 0) {
            $comments = Html::beginTag($this->printOptions['tag'], $this->printOptions['tagOptions']);
            foreach ($tree as $node) {
                $comments .= Html::beginTag($this->printOptions['elementTag'], $this->printOptions['elementOptions']);

                $parts = [];
                if ($node['model']->user !== null) {
                    $avatar = Html::img($node['model']->user->profile->picture, ['alt' => $node['model']->username]);
                } else {
                    $avatar = Html::img(Yii::$app->getModule('comments')->defaultAvatar, ['alt' => $node['model']->username]);
                }
                $parts['{avatar}'] = Html::tag('div', $avatar, $this->printOptions['avatarOptions']);
                $parts['{username}'] = Html::tag('div', Html::encode($node['model']['id']), $this->printOptions['usernameOptions']);
                $parts['{date}'] = Html::tag('div', Html::encode($node['model']['id']), $this->printOptions['dateOptions']);
                $parts['{body}'] = Html::tag('div', Html::encode($node['model']['body']), $this->printOptions['bodyOptions']);
                $parts['{actions}'] = Html::tag('div', Html::encode($node['model']['id']), $this->printOptions['actionsOptions']);

                $comments .= strtr($this->printOptions['template'], $parts);

                $comments .= $this->htmlCommentTree($node['children']);
                $comments .= Html::endTag($this->printOptions['elementTag']);
            }
            $comments .= Html::endTag($this->printOptions['tag']);
            return $comments;
        }
    }


    public function run()
    {
        $this->printOptions['tag'] = ArrayHelper::getValue($this->config['options'], 'tag', 'ul');
        $this->printOptions['tagOptions'] = ArrayHelper::getValue($this->config['options'], 'tagOptions', ['class' => 'comments-container']);
        $this->printOptions['elementTag'] = ArrayHelper::getValue($this->config['options'], 'elementTag', 'li');
        $this->printOptions['elementOptions'] = ArrayHelper::getValue($this->config['options'], 'elementOptions', ['class' => 'comment-element']);
        $this->printOptions['template'] = ArrayHelper::getValue($this->config['options'], 'template', "{avatar}{username}{date}\n{body}{actions}");
        $this->printOptions['avatarOptions'] = ArrayHelper::getValue($this->config['options'], 'elementOptions', ['class' => 'comment-avatar']);
        $this->printOptions['usernameOptions'] = ArrayHelper::getValue($this->config['options'], 'elementOptions', ['class' => 'comment-username']);
        $this->printOptions['dateOptions'] = ArrayHelper::getValue($this->config['options'], 'elementOptions', ['class' => 'comment-date']);
        $this->printOptions['bodyOptions'] = ArrayHelper::getValue($this->config['options'], 'elementOptions', ['class' => 'comment-body']);
        $this->printOptions['actionsOptions'] = ArrayHelper::getValue($this->config['options'], 'elementOptions', ['class' => 'comment-actions']);

        $comments = $this->getCommentsAsTree();

        return $this->view
            ? $this->render($this->view,[
                'comments' => $this->htmlCommentTree($comments),
            ])
            : $this->htmlCommentTree($comments);
    }
}